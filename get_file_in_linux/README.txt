READ ME!

0.python gitvim.py 문자열 혹은 ./gitvim.py 문자열 로 프로그램을 실행한다.
	Ex: python gitvim.py quiz
	Ex: ./gitvim.py [abc]

1. 프로그램에서 나가고 싶다면 << 를 입력하고 엔터를 누른다.

2. 만약 문자열을 포함하는 파일들이 10개를 초과할 시, > 를 입력하고 엔터를 눌러, 다음 최대 10개의 파일들을 볼 수 있다.
	(만약 다음 목록이 없는데  > 입력 시, "there are less than 10 files"가 출력된다.)

3. 이전 목록들을 보고 싶다면 < 를 입력하고 엔터를 누르면 된다. 물론 처음 목록에서는 쓸 수 없다.
	(만약 처음 목록에서  < 입력 시, "there are no previous files"가 출력된다.)

4. 만약 <<, <, > 이외의 커맨드를 입력할 시, "there is no file or command that you want" 라는 안내문과 함께
    프로그램이 종료된다.

5. 1부터 10까지의 숫자를 입력하고 엔터를 누를 시, 해당하는 번호의 파일이 vim에서 열리며 프로그램이 종료된다.
	(만약 해당하는 번호의 파일이 없을 시, "there is no file or command that you want" 라는 안내문과 함께
    	 프로그램이 종료된다.)

6. 문자열을 입력하면, 보여지는 파일 목록 중 해당 문자열을 포함하는 파일들을 화면에 출력해준다.
	(만약 해당하는 문자열을 포함하는 파일이 없을 시, "there is no file or command that you want" 라는 안내문과 함께
    	 프로그램이 종료된다.)
	(만약 해당 문자열을 포함하는 파일이 하나일시, 그 파일이 vim에서 열리며 프로그램이 종료된다.)

7. 정규표현식을 쓰고 싶다면 아래 정규표현식을 나타낼 때 쓰는 문자들 중 하나 이상을 포함해서 쓰면 된다.
   정규표현식에 쓰이는 문자들 :  . ^ $ * + ? { } [ ] \ | ( ) 
	(만약 잘못된 정규표현식을 써넣으면 "the regular expression that you write is wrong!"라는 안내문과 함께
	 프로그램이 종료된다. Ex: "[abc]"은 정상 동작하지만 "[abc"는 에러문구와 함께 종료된다.)

8. \<, >\ 는 파이썬에서는 인식이 될 수 없기 때문에 사용할 수 없다. 이에 대한 대안으로 \\b를 단어 뒤에
    넣으면 된다.

9. \를 포함한 정규식은 처음 argument에서는 \\를 써야하고, 그 이후부턴 \를 써야한다.
   Ex. ./gitvim.py quiz1\\b
         quiz1\b

